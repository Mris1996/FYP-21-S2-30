var test                 = require('tape')
  , sinon                = require('sinon')
  , util                 = require('util')
  , testCommon           = require('./testCommon')
  , AbstractLevelDOWN    = require('./').AbstractLevelDOWN
  , AbstractIterator     = require('./').AbstractIterator
  , AbstractChainedBatch = require('./').AbstractChainedBatch
  , isLevelDOWN          = require('./').isLevelDOWN

function factory (location, opts) {
  return new AbstractLevelDOWN(location, opts)
}

/*** compatibility with basic LevelDOWN API ***/

require('./abstract/leveldown-test').args(factory, test, testCommon)

require('./abstract/open-test').args(factory, test, testCommon)

require('./abstract/del-test').setUp(factory, test, testCommon)
require('./abstract/del-test').args(test)

require('./abstract/get-test').setUp(factory, test, testCommon)
require('./abstract/get-test').args(test)

require('./abstract/put-test').setUp(factory, test, testCommon)
require('./abstract/put-test').args(test)

require('./abstract/put-get-del-test').setUp(factory, test, testCommon)
require('./abstract/put-get-del-test').errorKeys(test)
//require('./abstract/put-get-del-test').nonErrorKeys(test, testCommon)
require('./abstract/put-get-del-test').errorValues(test)
//require('./abstract/test/put-get-del-test').nonErrorKeys(test, testCommon)
require('./abstract/put-get-del-test').tearDown(test, testCommon)

require('./abstract/approximate-size-test').setUp(factory, test, testCommon)
require('./abstract/approximate-size-test').args(test)

require('./abstract/batch-test').setUp(factory, test, testCommon)
require('./abstract/batch-test').args(test)

require('./abstract/chained-batch-test').setUp(factory, test, testCommon)
require('./abstract/chained-batch-test').args(test)

require('./abstract/close-test').close(factory, test, testCommon)

require('./abstract/iterator-test').setUp(factory, test, testCommon)
require('./abstract/iterator-test').args(test)
require('./abstract/iterator-test').sequence(test)

/*** extensibility ***/

test('test core extensibility', function (t) {
  function Test (location) {
    AbstractLevelDOWN.call(this, location)
    t.equal(this.location, location, 'location set on `this`')
    t.end()
  }

  util.inherits(Test, AbstractLevelDOWN)

  ;new Test('foobar')
})

test('test key/value serialization', function (t) {
  function Test (location) {
    AbstractLevelDOWN.call(this, location)
  }

  util.inherits(Test, AbstractLevelDOWN)

  var buffer = new Buffer(0)
  var test = new Test('foobar')

  t.equal(test._serializeKey(1), '1', '_serializeKey converts to string')
  t.ok(test._serializeKey(buffer) === buffer, '_serializeKey returns Buffer as is')

  t.equal(test._serializeValue(null), '', '_serializeValue converts null to empty string')
  t.equal(test._serializeValue(undefined), '', '_serializeValue converts undefined to empty string')

  var browser = !! process.browser
  process.browser = false

  t.equal(test._serializeValue(1), '1', '_serializeValue converts to string')
  t.ok(test._serializeValue(buffer) === buffer, '_serializeValue returns Buffer as is')

  process.browser = true
  t.equal(test._serializeValue(1), 1, '_serializeValue returns value as is when process.browser')

  process.browser = browser

  t.end()
})

test('test open() extensibility', function (t) {
  var spy = sinon.spy()
    , expectedCb = function () {}
    , expectedOptions = { createIfMissing: true, errorIfExists: false }
    , test

  function Test (location) {
    AbstractLevelDOWN.call(this, location)
  }

  util.inherits(Test, AbstractLevelDOWN)

  Test.prototype._open = spy

  test = new Test('foobar')
  test.open(expectedCb)

  t.equal(spy.callCount, 1, 'got _open() call')
  t.equal(spy.getCall(0).thisValue, test, '`this` on _open() was correct')
  t.equal(spy.getCall(0).args.length, 2, 'got two arguments')
  t.deepEqual(spy.getCall(0).args[0], expectedOptions, 'got default options argument')

  test.open({ options: 1 }, expectedCb)

  expectedOptions.options = 1

  t.equal(spy.callCount, 2, 'got _open() call')
  t.equal(spy.getCall(1).thisValue, test, '`this` on _open() was correct')
  t.equal(spy.getCall(1).args.length, 2, 'got two arguments')
  t.deepEqual(spy.getCall(1).args[0], expectedOptions, 'got expected options argument')
  t.end()
})

test('test close() extensibility', function (t) {
  var spy = sinon.spy()
    , expectedCb = function () {}
    , test

  function Test (location) {
    AbstractLevelDOWN.call(this, location)
  }

  util.inherits(Test, AbstractLevelDOWN)

  Test.prototype._close = spy

  test = new Test('foobar')
