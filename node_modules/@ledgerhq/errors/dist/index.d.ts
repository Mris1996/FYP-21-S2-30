import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer } from "./helpers";
export { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, };
export declare const AccountNameRequiredError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const AccountNotSupported: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const AmountRequired: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const BluetoothRequired: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const BtcUnmatchedApp: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const CantOpenDevice: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const CashAddrNotSupported: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const CurrencyNotSupported: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceAppVerifyNotSupported: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceGenuineSocketEarlyClose: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceNotGenuineError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceOnDashboardExpected: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceOnDashboardUnexpected: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceInOSUExpected: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceHalted: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceNameInvalid: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceSocketFail: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DeviceSocketNoBulkStatus: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DisconnectedDevice: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const DisconnectedDeviceDuringOperation: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const EnpointConfigError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const EthAppPleaseEnableContractData: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const FeeEstimationFailed: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const FirmwareNotRecognized: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const HardResetFail: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const InvalidXRPTag: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const InvalidAddress: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const InvalidAddressBecauseDestinationIsAlsoSource: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const LatestMCUInstalledError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const UnknownMCU: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const LedgerAPIError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const LedgerAPIErrorWithMessage: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const LedgerAPINotAvailable: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerAppAlreadyInstalledError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerAppRelyOnBTCError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerAppDepInstallRequired: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerAppDepUninstallRequired: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerDeviceLockedError: (message?: string, fields?: {
    [key: string]: any;
}) => void;
export declare const ManagerFirmwareNotEnoughSpaceError: (message?: string, fields?: 