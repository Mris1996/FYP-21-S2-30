{"version":3,"file":"index.cjs.js","sources":["../../../dist/batch-execute/src/prefix.js","../../../dist/batch-execute/src/mergeExecutionParams.js","../../../dist/batch-execute/src/splitResult.js","../../../dist/batch-execute/src/createBatchingExecutor.js","../../../dist/batch-execute/src/memoize.js","../../../dist/batch-execute/src/getBatchingExecutor.js"],"sourcesContent":["// adapted from https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\nexport function createPrefix(index) {\n    return `graphqlTools${index}_`;\n}\nexport function parseKey(prefixedKey) {\n    const match = /^graphqlTools([\\d]+)_(.*)$/.exec(prefixedKey);\n    if (match && match.length === 3 && !isNaN(Number(match[1])) && match[2]) {\n        return { index: Number(match[1]), originalKey: match[2] };\n    }\n    return null;\n}\n//# sourceMappingURL=prefix.js.map","// adapted from https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\nimport { visit, Kind, } from 'graphql';\nimport { createPrefix } from './prefix';\n/**\n * Merge multiple queries into a single query in such a way that query results\n * can be split and transformed as if they were obtained by running original queries.\n *\n * Merging algorithm involves several transformations:\n *  1. Replace top-level fragment spreads with inline fragments (... on Query {})\n *  2. Add unique aliases to all top-level query fields (including those on inline fragments)\n *  3. Prefix all variable definitions and variable usages\n *  4. Prefix names (and spreads) of fragments\n *\n * i.e transform:\n *   [\n *     `query Foo($id: ID!) { foo, bar(id: $id), ...FooQuery }\n *     fragment FooQuery on Query { baz }`,\n *\n *    `query Bar($id: ID!) { foo: baz, bar(id: $id), ... on Query { baz } }`\n *   ]\n * to:\n *   query (\n *     $graphqlTools1_id: ID!\n *     $graphqlTools2_id: ID!\n *   ) {\n *     graphqlTools1_foo: foo,\n *     graphqlTools1_bar: bar(id: $graphqlTools1_id)\n *     ... on Query {\n *       graphqlTools1__baz: baz\n *     }\n *     graphqlTools1__foo: baz\n *     graphqlTools1__bar: bar(id: $graphqlTools1__id)\n *     ... on Query {\n *       graphqlTools1__baz: baz\n *     }\n *   }\n */\nexport function mergeExecutionParams(execs, extensionsReducer) {\n    const mergedVariables = Object.create(null);\n    const mergedVariableDefinitions = [];\n    const mergedSelections = [];\n    const mergedFragmentDefinitions = [];\n    let mergedExtensions = Object.create(null);\n    let operation;\n    execs.forEach((executionParams, index) => {\n        const prefixedExecutionParams = prefixExecutionParams(createPrefix(index), executionParams);\n        prefixedExecutionParams.document.definitions.forEach(def => {\n            var _a;\n            if (isOperationDefinition(def)) {\n                operation = def.operation;\n                mergedSelections.push(...def.selectionSet.selections);\n                mergedVariableDefinitions.push(...((_a = def.variableDefinitions) !==