{"version":3,"file":"index.esm.js","sources":["../../../dist/loaders/json-file/src/index.js"],"sourcesContent":["import { parseGraphQLJSON, isValidPath, } from '@graphql-tools/utils';\nimport { isAbsolute, resolve } from 'path';\nimport { readFileSync, accessSync, promises as fsPromises } from 'fs';\nimport { cwd } from 'process';\nconst { readFile, access } = fsPromises;\nconst FILE_EXTENSIONS = ['.json'];\n/**\n * This loader loads documents and type definitions from JSON files.\n *\n * The JSON file can be the result of an introspection query made against a schema:\n *\n * ```js\n * const schema = await loadSchema('schema-introspection.json', {\n *   loaders: [\n *     new JsonFileLoader()\n *   ]\n * });\n * ```\n *\n * Or it can be a `DocumentNode` object representing a GraphQL document or type definitions:\n *\n * ```js\n * const documents = await loadDocuments('queries/*.json', {\n *   loaders: [\n *     new GraphQLFileLoader()\n *   ]\n * });\n * ```\n */\nexport class JsonFileLoader {\n    loaderId() {\n        return 'json-file';\n    }\n    async canLoad(pointer, options) {\n        if (isValidPath(pointer)) {\n            if (FILE_EXTENSIONS.find(extension => pointer.endsWith(extension))) {\n                const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || cwd(), pointer);\n                try {\n                    await access(normalizedFilePath);\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n 